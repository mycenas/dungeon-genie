<div class="name-gen-container">
  <h3>Let The Dice Decide Your One True Name</h3>
  <br>
  <form class="name-gen-form"> 
    <select id='race' name="race">
      <option value="elven">Elven</option>
      <option value="dwarven">Dwarven</option>
      <option value="dragonborn">Dragonborn</option>
      <option value="tiefling">Tiefling</option>
    </select>
    <select id='class' name="class">
      <option value="fighter">Fighter</option>
      <option value="warlock">Warlock</option>
      <option value="cleric">Cleric</option>
      <option value="druid">Druid</option>
    </select>
    <button id='submit' type="button">
    <i class="fa-solid fa-dice-d20 fa-shake fa-xl" style="color: #9900ff;"></i>
  </button>
  </form>
  <div id='nameArea'>
  </div>
</div>

<%= form_with(model: @character, local: true, html: { class: "new-character-form" }) do |f| %>
  <% if @character.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@character.errors.count, "error") %> prohibited this character from being saved:</h2>
      <ul>
        <% @character.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <h4>Name</h4>
  <div class="form-field">
    <h4><label for="character_name">Name</label></h4>
    <%= f.text_field :name, id: "character_name" %>
  </div>
  <br>
  <h4>Race</h4>
  <div class="form-field race-class-container">
    <h4><%= f.label :race %></h4>
    <% Race.all.each do |r| %>
      <button type="button" class="race-button glass-button-char" data-id="<%= r.id %>"><%= r.name %></button>
      <div class="form-hover-info">
        <h2> <%= r.name %> </h2>
        <p><%= r.description %></p>
        <strong> Ability bonuses:</strong>
        <p><%= r.ability_bonuses %></p>
        <strong> Traits:</strong>
        <p><%= r.traits %></p>
        <strong> Languages:</strong>
        <p><%= r.languages %></p>
      </div>
    <% end %>
    <%= f.hidden_field :race_id, id: "hidden_race_id" %>
  </div>
  <br>
  <h4>Class</h4>
  <div class="form-field character-class-container">
    <h4><%= f.label :character_class %></h3>
    <% CharacterClass.all.each do |c| %>
      <button type="button" class="character-class-button glass-button-char" data-id="<%= c.id %>"><%= c.name %></button>
      <div class="form-hover-info">
        <h2><%= c.name %></h2>
        <p><%= c.description %></p>
        <div class="ability-info">
          <div class="ability-section">
            <strong>Hit die:</strong>
            <p><%= c.hit_die %></p>
          </div>
          <div class="ability-section">
            <strong>Primary ability:</strong>
            <p><%= c.primary_ability %></p>
          </div>
          <div class="ability-section">
            <strong>Spellcasting ability:</strong>
            <p><%= c.spellcasting_ability %></p>
          </div>
        </div>
      </div>
    <% end %>
    <%= f.hidden_field :character_class_id, id: "hidden_character_class_id" %>
  </div>
  <br>
  <h4>Gender</h4>
  <div class="form-field gender-container">
    <h4><%= f.label :gender %></h4>
    <button type="button" class="gender-button glass-button-char" data-id="Female">Female</button>
    <button type="button" class="gender-button glass-button-char" data-id="Male">Male</button>
    <button type="button" class="gender-button glass-button-char" data-id="Non-Binary">Non-Binary</button>
    <button type="button" class="gender-button glass-button-char" data-id="Other">Other</button>
    <%= f.hidden_field :gender, id: "hidden_gender_id" %>
  </div>

  <br>
  <div class="actions">
    <%= f.submit "Create Character", class: "glass-button-select", style: "width: 200px;" %>
  </div>
<% end %>


<script>
console.log('start');
const submitButton = document.getElementById('submit');
console.log('button assigned');
const nameArea = document.getElementById('nameArea');

let beginningName = '';
let middleName = '';
let endName = '';
let title = '';
let epithet = '';

const elvenBeginning = ['Fa', 'Syl'];
const elvenMiddle = ['lews', 'sis'];
const elvenEnd = ['llyn', 'na'];

const dwarvenBeginning = ['Yo', 'Bi'];
const dwarvenMiddle = ['no', 'gan'];
const dwarvenEnd = ['minor', 'ithor'];

const wealdBeginning = ['Al', 'Ro'];
const wealdMiddle = ['g', 'th'];
const wealdEnd = ['ar', 'an'];

const tieflingBeginning = ['Br'];
const tieflingMiddle = ['i'];
const tieflingEnd = ['an'];

const warriorTitle = ['War Ender', 'Battlelord', 'Knight', 'Brawler', 'Blood Tyrant'];
const warriorEpithet = [', The Brave', ', The Bold', ', The Slaughterer'];

const wizardTitle = ['Sage', 'Archmage', 'Mage', 'Wizard', 'Necromancer'];
const wizardEpithet = [', The Enlightened', ', Dragon Speaker', ', The Eldritch'];

const trollTitle = ['Sexy', 'Glamorous', 'Foxy', 'Warmhearth'];
const trollEpithet = [', The Baddie'];

const druidTitle = ['Ethereal', 'Eternal', 'Lycan'];
const druidEpithet = [', The Wise', ', The Defiant', ', The Rebel', ', Mystical Protector', ', Forest Protector', ', Beast King'];
console.log('variables assigned');

function randomIntFromInterval(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}

submitButton.addEventListener('click', function () {
  console.log('submitted');

  // Clear existing names
  nameArea.innerHTML = '';

  let raceDropDown = document.getElementById("race");
  let race = raceDropDown.options[raceDropDown.selectedIndex].value;
  let myClass = document.getElementById('class').value;

  if (race == 'elven') {
    beginningName = elvenBeginning[randomIntFromInterval(1, elvenBeginning.length) - 1];
    middleName = elvenMiddle[randomIntFromInterval(1, elvenMiddle.length) - 1];
    endName = elvenEnd[randomIntFromInterval(1, elvenEnd.length) - 1];
  }
  if (race == 'dragonborn') {
    beginningName = wealdBeginning[randomIntFromInterval(1, wealdBeginning.length) - 1];
    middleName = wealdMiddle[randomIntFromInterval(1, wealdMiddle.length) - 1];
    endName = wealdEnd[randomIntFromInterval(1, wealdEnd.length) - 1];
  }

  if (race == 'dwarven') {
    beginningName = dwarvenBeginning[randomIntFromInterval(1, dwarvenBeginning.length) - 1];
    middleName = dwarvenMiddle[randomIntFromInterval(1, dwarvenMiddle.length) - 1];
    endName = dwarvenEnd[randomIntFromInterval(1, dwarvenEnd.length) - 1];
  }

  if (race == 'tiefling') {
    beginningName = tieflingBeginning[randomIntFromInterval(1, tieflingBeginning.length) - 1];
    middleName = tieflingMiddle[randomIntFromInterval(1, tieflingMiddle.length) - 1];
    endName = tieflingEnd[randomIntFromInterval(1, tieflingEnd.length) - 1];
  }

  if (myClass == 'warlock') {
    title = wizardTitle[randomIntFromInterval(1, wizardTitle.length) - 1];
    epithet = wizardEpithet[randomIntFromInterval(1, wizardEpithet.length) - 1];
  }

  if (myClass == 'fighter') {
    title = warriorTitle[randomIntFromInterval(1, warriorTitle.length) - 1];
    epithet = warriorEpithet[randomIntFromInterval(1, warriorEpithet.length) - 1];
  }
  if (myClass == 'cleric') {
    title = trollTitle[randomIntFromInterval(1, trollTitle.length) - 1];
    epithet = trollEpithet[randomIntFromInterval(1, trollEpithet.length) - 1];
  }

  if (myClass == 'druid') {
    title = druidTitle[randomIntFromInterval(1, druidTitle.length) - 1];
    epithet = druidEpithet[randomIntFromInterval(1, druidEpithet.length) - 1];
  }

  let myName = title + ' ' + beginningName + middleName + endName + ' ' + epithet;
  let fantasyName = document.createElement('li');
  fantasyName.textContent = myName;

  nameArea.append(fantasyName);
  console.log('fantasyName appended');
});
</script>

<script>
document.addEventListener("DOMContentLoaded", function() {
  // For character classes
  document.querySelectorAll('.character-class-button').forEach(function(button) {
    button.addEventListener('click', function(e) {
      // Remove the 'button-selected' class from all other buttons in the group
      document.querySelectorAll('.character-class-button').forEach(function(otherButton) {
        otherButton.classList.remove('button-selected');
      });

      // Add the 'button-selected' class to the clicked button
      e.target.classList.add('button-selected');

      // Update the hidden field value
      document.getElementById("hidden_character_class_id").value = e.target.dataset.id;
    });
  });

  // For races
  document.querySelectorAll('.race-button').forEach(function(button) {
    button.addEventListener('click', function(e) {
      // Remove the 'button-selected' class from all other buttons in the group
      document.querySelectorAll('.race-button').forEach(function(otherButton) {
        otherButton.classList.remove('button-selected');
      });

      // Add the 'button-selected' class to the clicked button
      e.target.classList.add('button-selected');

      // Update the hidden field value
      document.getElementById("hidden_race_id").value = e.target.dataset.id;
    });
  });

  // New code for gender
  document.querySelectorAll('.gender-button').forEach(function(button) {
    button.addEventListener('click', function(e) {
      // Remove the 'button-selected' class from all other buttons in the group
      document.querySelectorAll('.gender-button').forEach(function(otherButton) {
        otherButton.classList.remove('button-selected');
      });

      // Add the 'button-selected' class to the clicked button
      e.target.classList.add('button-selected');

      // Update the hidden field value
      document.getElementById("hidden_gender_id").value = e.target.dataset.id;
    });
  });
});
</script>
